{"ast":null,"code":"var _jsxFileName = \"/Users/satapat/Desktop/test-project/Table react crud data/react-localstorage-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DataTable from './components/DataTable';\nimport AddForm from './components/AddForm';\nimport EditForm from './components/EditForm';\nimport { format } from 'date-fns';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState(JASON(localStorage.getItem('data')) || []);\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentData, setCurrentData] = useState({\n    id: null,\n    title: '',\n    creationTime: ''\n  });\n\n  // useEffect(() => {\n  //   // Load data from LocalStorage when the component mounts\n  //   const storedData = localStorage.getItem('data');\n  //   if (storedData) {\n  //     setData(JSON.parse(storedData));\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    // Save data to LocalStorage whenever data changes\n    localStorage.setItem('data', JSON.stringify(data));\n  }, [data]);\n  const addData = title => {\n    const newData = {\n      id: data.length + 1,\n      title,\n      creationTime: format(new Date(), 'yyyy-MM-dd HH:mm:ss')\n    };\n    setData([...data, newData]);\n  };\n  const deleteData = id => {\n    const updatedData = data.filter(item => item.id !== id);\n    setData(updatedData);\n  };\n  const editData = updatedData => {\n    const updatedItems = data.map(item => item.id === updatedData.id ? updatedData : item);\n    setData(updatedItems);\n    setIsEditing(false);\n  };\n  const startEdit = item => {\n    setIsEditing(true);\n    setCurrentData({\n      id: item.id,\n      title: item.title,\n      creationTime: item.creationTime\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"React CRUD with LocalStorage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), isEditing ? /*#__PURE__*/_jsxDEV(EditForm, {\n      currentData: currentData,\n      setIsEditing: setIsEditing,\n      editData: editData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(AddForm, {\n      addData: addData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      data: data,\n      deleteData: deleteData,\n      startEdit: startEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"EjgP6NAHsoV9hSgiB4Ys6MFYbrY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DataTable","AddForm","EditForm","format","jsxDEV","_jsxDEV","App","_s","data","setData","JASON","localStorage","getItem","isEditing","setIsEditing","currentData","setCurrentData","id","title","creationTime","setItem","JSON","stringify","addData","newData","length","Date","deleteData","updatedData","filter","item","editData","updatedItems","map","startEdit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/satapat/Desktop/test-project/Table react crud data/react-localstorage-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DataTable from './components/DataTable';\nimport AddForm from './components/AddForm';\nimport EditForm from './components/EditForm';\nimport { format } from 'date-fns';\nimport './App.css';\n\nconst App = () => {\n  const [data, setData] = useState(JASON(localStorage.getItem('data')) || []);\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentData, setCurrentData] = useState({ id: null, title: '', creationTime: '' });\n\n  // useEffect(() => {\n  //   // Load data from LocalStorage when the component mounts\n  //   const storedData = localStorage.getItem('data');\n  //   if (storedData) {\n  //     setData(JSON.parse(storedData));\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    // Save data to LocalStorage whenever data changes\n    localStorage.setItem('data', JSON.stringify(data));\n  }, [data]);\n\n  const addData = (title) => {\n    const newData = {\n      id: data.length + 1,\n      title,\n      creationTime: format(new Date(), 'yyyy-MM-dd HH:mm:ss'),\n    };\n    setData([...data, newData]);\n  };\n\n  const deleteData = (id) => {\n    const updatedData = data.filter(item => item.id !== id);\n    setData(updatedData);\n  };\n\n  const editData = (updatedData) => {\n    const updatedItems = data.map(item => (item.id === updatedData.id ? updatedData : item));\n    setData(updatedItems);\n    setIsEditing(false);\n  };\n\n  const startEdit = (item) => {\n    setIsEditing(true);\n    setCurrentData({ id: item.id, title: item.title, creationTime: item.creationTime });\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>React CRUD with LocalStorage</h1>\n      {isEditing ? (\n        <EditForm currentData={currentData} setIsEditing={setIsEditing} editData={editData} />\n      ) : (\n        <AddForm addData={addData} />\n      )}\n      <DataTable data={data} deleteData={deleteData} startEdit={startEdit} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}